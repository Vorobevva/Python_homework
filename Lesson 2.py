# Задание 1.
# Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого
# элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а
# указать явно, в программе.
print('Задание 1')
list_1 = [25, 43.4 , True , None , 'Строка']
print("Заданы следующие элементы списка - ", list_1)
# первый способ - заполнением нового списка типом данных каждого элемента
list_of_types = []
n_list1 = 0
for el1 in list_1:
    type(el1)
    print(n_list1 , "элемент списка  " , list_1 [n_list1] , "  это - " , type(el1))
    n_list1 = n_list1 + 1
    list_of_types.append(type(el1))
print("Список с типами данных элементов - " , list_of_types)

# второй способ - сразу создаем список и заполняем его циклом
print ("Такой же список с типами данных, но проще - " , [type(i) for i in list_1])



# Задание 2.
# Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы с индексами 0 и 1, 2 и
# 3 и т. д. При нечётном количестве элементов последний сохранить на своём месте. Для заполнения списка элементов
# нужно использовать функцию input()
print('')
print('Задание 2')
list_task_2 = []
n_list_task_2 = int(input('Сколько будет элементов в списке?'))
n_2 = 0
for n_2 in range(n_list_task_2):
    print('Введите  ', n_2, '  элемент списка')
    elem_task_2 = input()
    list_task_2.append(elem_task_2)
print('Исходный список - ', list_task_2)
print('Перевернутый список:')
for n_rev_2 in range(0, n_list_task_2 - n_list_task_2 % 2, 2 ):
    list_task_2[n_rev_2], list_task_2[n_rev_2 + 1] = list_task_2[n_rev_2 + 1], list_task_2[n_rev_2]
print(list_task_2)

# Задание 3.
# Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года относится месяц (зима,
# весна, лето, осень). Напишите решения через list и dict.
print('')
print('Задание 3')
list_seasons = ['Зима', 'Весна' , 'Лето', 'Осень']
dict_seasons = dict(quarter1= 'Зима', quarter2= 'Весна', quarter3= 'Лето', quarter4= 'Осень')
list_mounth = ['Январь' , 'Февраль' , 'Март' , 'Апрель' , 'Май' , 'Июнь' , 'Июль' , 'Август' , 'Сентябрь' , 'Октябрь' ,
               'Ноябрь' , 'Декабрь']
mounth = int(input('Введите номер месяца'))
# 123 // 456  //  789 //  10 11 12
if mounth <= 2 or mounth == 12:
    print(list_mounth[mounth-1], 'Это', list_seasons[0])
    print(list_mounth[mounth-1], 'Это' , dict_seasons.get('quarter1'), '(через словарь)')
#print('Это', list_seasons [1])
elif 3 <= mounth <= 5:
    print(list_mounth[mounth-1], 'Это', list_seasons[1])
    print(list_mounth[mounth-1], 'Это' , dict_seasons.get('quarter2'), '(через словарь)')
elif 6 <= mounth <= 8:
    print(list_mounth[mounth-1], 'Это', list_seasons[2])
    print(list_mounth[mounth-1], 'Это' , dict_seasons.get('quarter3'), '(через словарь)')
else:
    print(list_mounth[mounth-1], 'Это', list_seasons [3])
    print(list_mounth[mounth-1], 'Это' , dict_seasons.get('quarter4'), '(через словарь)')

# Задание 4
# Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.
print('')
print('Задание 4')
str_long = str(input('Введите строку из нескольких слов'))
list_long = str_long.split()
for ind, el in enumerate(list_long, 1):
        print(ind, el[:10])

# Задание 5.
# Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает.
# У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].
print('')
print('Задание 5')
list_task_5 = [7, 5, 3, 3, 2]
print('Исходный рейтинг - ' , list_task_5)
el_task_5 = int(input('Введите новый элемент рейтинга'))

# Вариант № 1. Реализует только тот пример, который в тексте задачи. Не работает, когда вводится число, отличное от
# имеющегося в списке.
max_value_5 = max (list_task_5)
if el_task_5 > max_value_5:
    list_task_5.insert(0,el_task_5)
elif el_task_5 in list_task_5:
    list_task_5.insert(list_task_5.index(el_task_5) , el_task_5)
else:
    list_task_5.append(el_task_5)
print(list_task_5)

# Вариант № 2. Хитрый. С сортировкой списка.
list_task_5_2 = [7, 5, 3, 3, 2]
list_task_5_2.append(el_task_5)
print(list_task_5_2)
print(sorted(list_task_5_2 , reverse = True))

# Вариант № 3. Сортировка по элементу. Недоделал.
# читать https://pythonru.com/osnovy/top-5-algoritmov-sortirovki-na-python

# Задание 6.
# *Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит
# информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами,
# то есть характеристиками товара: название, цена, количество, единица измерения.
# Структуру нужно сформировать программно, запросив все данные у пользователя.
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Нужно собрать аналитику о товарах.
# Реализовать словарь, в котором каждый ключ —характеристика товара, например,
# название. Тогда значение — список значений-характеристик, например, список названий товаров.
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }

print('')
print('Задание 6')
list_task_6 = []
dict_task_6 = {'название': '', 'цена': '', 'количество': '', 'eд': ''}
analyse_task_6 = {'название': [], 'цена': [], 'количество': [], 'eд': []}

n_6 = 0
yn = None
yn2 = None
dict_key_6 = None

while True:
    yn = input("Ввести информацию о товаре - Y (Да) / N (нет)")
    if yn == 'Y':
        n_6 += 1
        for dc in dict_task_6.keys():
            dict_key_6 = input(f'Введите "{dc}"')
            dict_task_6[dc] = int(dict_key_6) if (dc == 'цена' or dc == 'количество') else dict_key_6
            analyse_task_6[dc].append(dict_task_6[dc])
        list_task_6.append((n_6, dict_task_6))
    if yn == 'N':
        yn_2 = input("Составить аналитику? - Y (Да) / Q (завершить работу)")
        if yn_2 == 'Y':
            for key, value in analyse_task_6.items():
                print('..................'*n_6)
                #print(f'{key[:25]:>30}: {value}')
                print(f'{key}: {value}')
        if yn_2 == 'Q':
            print('')
            print('Спасибо, до свидания!')
            break





